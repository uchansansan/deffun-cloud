type Query {
    projects: [Project!]!
}

type Mutation {
    createProject(name: String): Project!
    createApi(projectId: ID!, schema: String!, name: String, basePackage: String, framework: Framework, database: Database): Project!
    deployApi(projectId: ID!): Project!
    setEnvVar(projectId: ID!, key: String!, value: String!): Project!
    # what should this method return?
    addOAuthProvider(projectId: ID!, input: ProviderInput!): Project!
#    addOAuthProviders(projectId: ID!, inputs: [ProviderInput!]!): Project!
}

input ProviderInput {
    provider: OAuthProvider!
    clientId: String!
    clientSecret: String!
}

type Subscription {
    asyncDeployApi(projectId: ID!): Project!
}

type Project {
    id: ID!
    name: String!
    basePackage: String!
    sourceCodeUrl: String!
    apiEndpointUrl: String!
    user: User!
}

type User {
    id: ID!
    username: String!
    email: String!
}

enum Database {
    MYSQL, MARIADB, POSTGRES, MONGODB
}

enum Framework {
    MICRONAUT
}

enum OAuthProvider {
    GOOGLE
}
